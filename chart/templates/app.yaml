apiVersion: v1
kind: Service
metadata:
  name: resource
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: resource
  ports:
    - protocol: TCP
      port: {{ .Values.service.port }}
      targetPort: 8080
      nodePort: {{ .Values.service.nodePort }}
  type: {{ .Values.service.type }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: resource
  namespace: {{ .Values.namespace }}
  labels:
    app: resource
spec:
  replicas: {{ .Values.deployment.app.replica }}
  selector:
    matchLabels:
      app: resource
  template:
    metadata:
      name: resource
      labels:
        app: resource
    spec:
      containers:
        - name: resource
          image: {{ .Values.deployment.app.image }}
          imagePullPolicy: {{ .Values.deployment.pullPolicy }}
          ports:
            - containerPort: 8080
          env:
            - name: DB_URL
              valueFrom:
                configMapKeyRef:
                  name: resource-config
                  key: DB_URL
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: resource-secret
                  key: POSTGRES_DB
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: resource-secret
                  key: POSTGRES_USER
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: resource-secret
                  key: POSTGRES_PASSWORD
            - name: AWS_S3_ENDPOINTURL
              valueFrom:
                configMapKeyRef:
                  name: resource-config
                  key: AWS_S3_ENDPOINTURL
            - name: AWS_S3_BACKETNAME
              valueFrom:
                secretKeyRef:
                  name: resource-secret
                  key: AWS_S3_BACKETNAME
          startupProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 120
            timeoutSeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path }}
              port: {{ .Values.livenessProbe.httpGet.port }}
            initialDelaySeconds: 60
            timeoutSeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.readinessProbe.httpGet.port }}
            initialDelaySeconds: 60
            timeoutSeconds: 10
            periodSeconds: 5
      restartPolicy: Always
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
